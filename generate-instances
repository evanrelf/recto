#!/usr/bin/env bash

set -Eeuo pipefail
IFS=$'\n\t'

if [ "$#" -gt 1 ]; then
  echo "usage: ./generate-instances COUNT" >&2
  exit 1
fi

count=${1:-64}

if [ "$count" -gt 64 ]; then
  echo "error: GHC only supports tuples up to size 64" >&2
  exit 1
fi

echo "\
-- Generated by \`./generate-instances\` script; do not edit manually

{-# LANGUAGE DataKinds #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeOperators #-}

{-# OPTIONS_GHC -Wno-orphans #-}

module Recto.Internal.Instances () where

import Recto.Internal
"

for i in $(seq 0 "$count"); do
  if [ "$i" -eq 0 ]; then
    echo "instance RecordFromTuple () '[] where"
    echo "  tupleToRecord () = RNil"
    echo "  recordToTuple RNil = ()"
  elif [ "$i" -eq 1 ]; then
    echo ""
    echo "instance RecordFromTuple (n ::: a) '[n ::: a] where"
    echo "  tupleToRecord x = x \`RCons\` RNil"
    echo "  recordToTuple (x \`RCons\` RNil) = x"
  else
    type=""
    tuple=""
    record=""
    for j in $(seq 1 "$i"); do
      if [ "$j" = 1 ]; then
        type="n1 ::: a1"
        tuple="x1"
        record="x1 \`RCons\`"
      else
        type="$type, n$j ::: a$j"
        tuple="$tuple, x$j"
        record="$record x$j \`RCons\`"
      fi
      if [ "$j" -eq "$i" ]; then
        record="$record RNil"
      fi
    done
    echo ""
    echo "instance RecordFromTuple ($type) '[$type] where"
    echo "  tupleToRecord ($tuple) = $record"
    echo "  recordToTuple ($record) = ($tuple)"
  fi
done
